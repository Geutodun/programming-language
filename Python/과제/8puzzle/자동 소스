import cv2
import random
import numpy as np
import matplotlib.pyplot as plt
import pyautogui
import copy
import time


#전환수 찾기 알고리즘
z = 0
v = [0, 1, 2, 3, 4, 5, 6, 7, 8]

while z != 1:
    b = random.sample(v, 9)
    x = 0
    y = 0
    for i in range(9):
        if b[i] == 0:
            x = i
    if x <= 2:
        y = 1
    elif x <= 5:
        y = 2
    else:
        y = 3
    count = 0
    for i in range(len(b)):
        for j in range(i + 1, len(b)):
            if b[i] > b[j] and b[i] != 0 and b[j] != 0:
                count += 1   
    if (y == 1 or y ==3) and (count % 2) == 1:       
        z = 1
    elif y == 2 and (count % 2) == 0:
        z = 1
    for i in range(9):
        v[i] = b[i]

cur = [ ['2', '8', '3'], ['1', '6', '4'], ['7', '0', '5'] ]
l = 0
for i in range(3):
    for j in range(3):
        if v[l] == 0:
            cur[i][j] = '0'
        elif v[l] == 1:
            cur[i][j] = '1'
        elif v[l] == 2:
            cur[i][j] = '2'
        elif v[l] == 3:
            cur[i][j] = '3'
        elif v[l] == 4:
            cur[i][j] = '4'
        elif v[l] == 5:
            cur[i][j] = '5'
        elif v[l] == 6:
            cur[i][j] = '6'
        elif v[l] == 7:
            cur[i][j] = '7'
        elif v[l] == 8:
            cur[i][j] = '8'
        l += 1


goal = [ ['1', '2', '3'], ['8', '0', '4'], ['7', '6', '5'] ]
oper = ['up', 'down', 'right', 'left']
img0 = cv2.imread('puzzle/num_0.png')
img1 = cv2.imread('puzzle/num_1.png')
img2 = cv2.imread('puzzle/num_2.png')
img3 = cv2.imread('puzzle/num_3.png')
img4 = cv2.imread('puzzle/num_4.png')
img5 = cv2.imread('puzzle/num_5.png')
img6 = cv2.imread('puzzle/num_6.png')
img7 = cv2.imread('puzzle/num_7.png')
img8 = cv2.imread('puzzle/num_8.png')
imglist1 = [img0, img1, img2, img3, img4, img5, img6, img7, img8]     

def movePuzzle(puzzle, x, y, oper):
    if(oper == 'up'):
        if(x - 1 < 0):
            return None
        else:
            tmp = puzzle[x][y]
            puzzle[x][y] = puzzle[x-1][y]
            puzzle[x-1][y] = tmp

            return puzzle

    elif(oper == 'down'):
        if (x + 1 >= 3):
            return None
        else:
            tmp = puzzle[x][y]
            puzzle[x][y] = puzzle[x + 1][y]
            puzzle[x + 1][y] = tmp

            return puzzle

    elif(oper == 'right'):
        if (y + 1 >= 3):
            return None
        else:
            tmp = puzzle[x][y]
            puzzle[x][y] = puzzle[x][y + 1]
            puzzle[x][y + 1] = tmp

            return puzzle

    elif(oper == 'left'):
        if (y - 1 < 0):
            return None
        else:
            tmp = puzzle[x][y]
            puzzle[x][y] = puzzle[x][y - 1]
            puzzle[x][y - 1] = tmp

            return puzzle

def checkZero(puzzle):
    x, y = 0, 0
    for i in range(3):
        for j in range(3):
            if puzzle[i][j] == '0':
                x, y = i, j
    return x, y
     

class Node:
    def __init__(self, data, hval, level):
        self.data = data
        self.hval = hval
        self.level = level
     

def h(puzzle, goal):
    cnt = 0
    for i in range(3):
        for j in range(3):
            if puzzle[i][j] != goal[i][j]:
                cnt += 1
    return cnt
     

def f(puzzle, goal):
    return puzzle.level + h(puzzle.data, goal)
     
def puzzleprint(puzzle):
    v = []
    for i in range(3):
        for j in range(3):
            v.append(puzzle[i][j])
    fig, axes = plt.subplots(3, 3, figsize=(5, 5))        
    for i in range(9):
        if v[i] == '0':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[0])
        elif v[i] == '1':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[1])
        elif v[i] == '2':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[2])
        elif v[i] == '3':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[3])    
        elif v[i] == '4':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[4])
        elif v[i] == '5':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[5])
        elif v[i] == '6':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[6])
        elif v[i] == '7':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[7])
        elif v[i] == '8':
            plt.subplot(3, 3, i+1)
            plt.gca().axes.xaxis.set_visible(False)
            plt.gca().axes.yaxis.set_visible(False)
            plt.imshow(imglist1[8])
    plt.show(block=False)
    plt.pause(5)
    plt.close()                             
    return 1


def astar(puzzle):
    visit = []
    queue = []
    start = Node(data=puzzle, hval=h(puzzle=puzzle, goal=goal), level=0)
    queue.append(start)

    while queue is not None:
        current = queue.pop(0)
        print(np.array(current.data))
        puzzleprint(current.data)
        if (h(current.data, goal) == 0):
            return visit
        else:
            visit.append(current.data)
            x, y = checkZero(current.data)

            for op in oper:
                next = movePuzzle(copy.deepcopy(current.data), x, y, op)

                if next not in visit and next is not None:
                    queue.append(Node(next, h(next, goal), current.level + 1))
            queue.sort(key=lambda x: f(x, goal), reverse=False)
    return -1

     

astar(cur)
plt.show()
