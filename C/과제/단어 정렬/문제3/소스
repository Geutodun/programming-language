#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int z = 0, g = -1;

typedef int element;
typedef struct TreeNode {
	element key;
	struct TreeNode* left, * right;
} TreeNode;


typedef struct data {
	int num;
	char name[100];
} data;

data school[20];

TreeNode* new_node(int item)
{
	TreeNode* temp = (TreeNode*)malloc(sizeof(TreeNode));
	temp->key = item;
	temp->left = temp->right = NULL;
	return temp;
}

// 중위 순회
void inorder(TreeNode* root) {
	if (root) {
		inorder(root->left);// 왼쪽서브트리 순회
		printf("[%d] ", root->key);
		for (int j = 0; j < 20; j++)
		{
			if ((root->key) == school[j].num)
			{
				printf(" %s \n",school[j].name);
			}
		}
		// 노드 방문
		inorder(root->right);// 오른쪽서브트리 순회
	}
}

// 중위 순회
int ainorder(TreeNode* root,int a) {
	if (root) {
		ainorder(root->left,a);// 왼쪽서브트리 순회
		z++;
		if ((root->key) == a)
		{
			g = z;
		}
		ainorder(root->right,a);// 오른쪽서브트리 순회
	}
}


TreeNode* insert_node(TreeNode* node, int key)
{
	// 트리가 공백이면 새로운 노드를 반환한다. 
	if (node == NULL) return new_node(key);

	// 그렇지 않으면 순환적으로 트리를 내려간다. 
	if (key < node->key)
		node->left = insert_node(node->left, key);
	else if (key > node->key)
		node->right = insert_node(node->right, key);

	// 변경된 루트 포인터를 반환한다. 
	return node;
}



int main(void)
{
	TreeNode* root = NULL;
	TreeNode* tmp = NULL;
	FILE* fp1 = fopen("data.txt", "r");

	if (fp1 == NULL)
	{
		fprintf(stderr, "원본 파일 data.txt를 열 수 없습니다.\n");
		return 0;
	}
	int x = 0, y;
	int a = 0, b = 0;

	char buffer[100], * ptr;

	int i = 0;


	while (!feof(fp1)) {
		i = 0;
		fgets(buffer, 100, fp1);
		ptr = strtok(buffer, " ");
		while (ptr != NULL)
		{
			if (i == 0) 
			{
				school[a].num = atoi(ptr);
			}
			else if (i == 1) 
			{
				strcpy(school[a].name, ptr);
			}
			i++;
			ptr = strtok(NULL, " ");
		}
		a++;
	}
	
	for (int j = 0; j < 20; j++)
	{
		root = insert_node(root, school[j].num);
	}
	fclose(fp1);

	inorder(root);
	printf("\n찾을 수:");
	scanf_s("%d", &x);
	ainorder(root, x);

	if (g != -1)
	{
		printf("%d번째 있습니다.", g);
	}
	else
	{
		printf("No Exist!!!");
	}
	

	return 0;
}
